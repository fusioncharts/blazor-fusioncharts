@page "/"
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime
@inject FusionChartsService fusionChartsService;
<PageTitle>Index</PageTitle>
<h2>1. LARGE DATA</h2>
<div>
    <div id="chartContainer1"></div>
</div>
<!-- <button @onclick="ChangeData">Change Data</button> -->
<!-- <p>Value: @value</p> -->
Welcome to your new app.
@code {
    public static Index _instance;
    public Index()
    {
        _instance = this;
    }

    // calling this method from static method using instance of Index   

    public async Task NonStaticMethod()
    {
        Console.WriteLine("Hey! I'm not static method only");
        await fusionChartsService.CallFusionChartsFunction("setChartAttribute", "CHART_ID", "caption", "neww");
    }

    // this is static method which we have added in the event using dotnet

    [JSInvokable("ChangeData")]
    public static async Task ChangeData()
    {
        // Call the non-static method from the instance
        await _instance.NonStaticMethod();
        Console.WriteLine(_instance);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await fusionChartsService.activateLicense("LICENSE_KEY");
            await renderColumnCharts();
            await changeChartAttribute();
        }
        else
        {
        }
    }
    public static int value = 0;
    //[JSInvokableAttribute("ChangeData")]
    [JSInvokable]
    private async Task CallChangeDataMethod()
    {
        await JSRuntime.InvokeVoidAsync("callChangeDataMethod");
    }

    private async Task renderColumnCharts()
    {
        dynamic myChartConfig = new System.Dynamic.ExpandoObject();
        dynamic myDataSource = new System.Dynamic.ExpandoObject();
        dynamic myChart = new System.Dynamic.ExpandoObject();
        dynamic myEvent = new System.Dynamic.ExpandoObject();
        myChartConfig.type = "column2D";
        myChartConfig.width = 1000;
        myChartConfig.height = 600;
        myChartConfig.dataFormat = "json";
        myChartConfig.renderAt = "chartContainer1";
        myChart.caption = "Monthly Sales";
        myChart.subCaption = "Last year";
        myChart.xAxisName = "Month";
        myChart.yAxisName = "Sales (in USD)";
        myChart.theme = "fusion";

        // here we are calling .net method from javascript
       // myEvent.dataPlotClick = "function() { DotNet.invokeMethodAsync('BlazorApp1', 'ChangeData') }";

        myDataSource.data = new[] {
            new { label = "X0", value = "380000" },
            new { label = "X1", value = "340000" },
            new { label = "X2", value = "740000" },
            new { label = "X3", value = "800000" },
            new { label = "X4", value = "400000" },
    };
        myDataSource.chart = myChart;
        myChartConfig.dataSource = myDataSource;
        myChartConfig.id = "CHART_ID";
        myChartConfig.events = myEvent;
        String chartConfig = System.Text.Json.JsonSerializer.Serialize(myChartConfig);
        await fusionChartsService.renderChart(chartConfig);

    }
    private async Task changeChartAttribute()
    {

        //await fusionChartsService.CallFusionChartsFunction("setChartAttribute", "CHART_ID", "caption", "newcaption");
        await fusionChartsService.CallFusionChartsFunction("addEventListener", "CHART_ID", "dataPlotClick", "function() { console.log('Data plot click handler but dynamically') }");
        //dynamic res = await fusionChartsService.CallFusionChartsFunction("hasRendered", "CHART_ID");

    }
}
<SurveyPrompt Title="How is Blazor working for you?" />