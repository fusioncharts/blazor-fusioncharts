@page "/waterfall2d"

@using System.Net.Http;
@inject NavigationManager navigationManager;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject FusionChartsService fusionChartsService;

<PageTitle>Waterfall / Cascade Chart chart </PageTitle>

<div>
    <div id="waterfall2d"></div>
</div>

@code {

    public async Task demo()
    {
        // chart code
        dynamic myChartConfig = new System.Dynamic.ExpandoObject();
        dynamic myDataSource = new System.Dynamic.ExpandoObject();
        dynamic myChart = new System.Dynamic.ExpandoObject();
        dynamic myEvent = new System.Dynamic.ExpandoObject();

        //events
        myEvent.loaded = "function() { console.log('loaded')}";
        myEvent.renderComplete = "function() { console.log('renderComplete')}";
        myEvent.initialized = "function() { console.log('initialized')}";
        myEvent.beforeRender = "function() { console.log('beforeRender')}";
        myEvent.rendered = "function() { console.log('rendered')}";

        myEvent.dataPlotClick = "function() { console.log('dataPlotClick')}";
        myEvent.dataplotRollOver = "function() { console.log('dataplotRollOver')}";
        myEvent.dataplotRollOut = "function() { console.log('dataplotRollOut')}";
        myEvent.dataLabelClick = "function() { console.log('dataLabelClick')}";
        myEvent.dataLabelRollOver = "function() { console.log('dataLabelRollOver')}";
        myEvent.dataLabelRollOut = "function() { console.log('dataLabelRollOut')}";

        myEvent.legendItemClicked = "function() { console.log('legendItemClicked')}";
        myEvent.legendItemRollOver = "function() { console.log('legendItemRollOver')}";
        myEvent.legendItemRollOut = "function() { console.log('legendItemRollOut')}";

        myEvent.chartClick = "function() { console.log('chartClick')}";
        myEvent.chartRollOver = "function() { console.log('chartRollOver')}";
        myEvent.chartRollOut = "function() { console.log('chartRollOut')}";

        myChartConfig.type = "waterfall2d";
        myChartConfig.width = 1000;
        myChartConfig.height = 600;
        myChartConfig.dataFormat = "json";
        myChartConfig.renderAt = "waterfall2d";

        myChart.caption = "Total Profit Calculation";
        myChart.subcaption = "Last month";
        myChart.yAxisname = "Amount (In USD)";
        myChart.numberprefix = "$";
        myChart.connectordashed = "1";
        myChart.sumlabel = "Total {br} Profit";
        myChart.positiveColor = "#6baa01";
        myChart.negativeColor = "#e44a00";
        myChart.theme = "fusion";


        myDataSource.data = new[]
        {
            new
            {
                label = "Online sales",
                issum = "",
                value = "420000",
                cumulative = ""
            }, new
            {
                label = "Store Sales",
                issum = "",
                value = "710000",
                cumulative = ""
            }, new
            {
                label = "Total Sales",
                issum = "1",
                value = "",
                cumulative = ""
            }, new
            {
                label = "Fixed Costs",
                issum = "1",
                value = "-250000",
                cumulative = ""
            }, new
            {
                label = "Variable Costs",
                issum = "",
                value = "-156000",
                cumulative = ""
            }, new
            {
                label = "COGS",
                issum = "",
                value = "-310000",
                cumulative = ""
            }, new
            {
                label = "Promotion Costs",
                issum = "",
                value = "-86000",
                cumulative = ""
            }, new
            {
                label = "Total Costs",
                issum = "1",
                value = "-86000",
                cumulative = "0"
            }
        };


        myDataSource.value = "92";
        myDataSource.chart = myChart;

        myChartConfig.events = myEvent;
        myChartConfig.dataSource = myDataSource;
        String chartConfig = System.Text.Json.JsonSerializer.Serialize(myChartConfig);
        await fusionChartsService.renderChart(chartConfig);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await demo();
        }
        else
        {

        }
    }

}