@page "/simplesankey"
@using Microsoft.JSInterop;
@using System.Text.Json;
@inject IJSRuntime JSInterop;
@inject FusionChartsService fusionChartsService;
@using System.Net.Http;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using System.Text.Json.Serialization;
<center>
    <h3>
        <b>Sankey Diagram</b>
    </h3>
</center>
<div id="sankeyID"></div>
@code {
    public async Task renderSankeyDiagram()
    {
        dynamic myChartConfig = new System.Dynamic.ExpandoObject();
        dynamic myDataSource = new System.Dynamic.ExpandoObject();
        dynamic myChart = new System.Dynamic.ExpandoObject();
        dynamic myEvent = new System.Dynamic.ExpandoObject();
        ////myEvent.nodeUpdated = "function() { console.log('nodeUpdated')}";
        //myEvent.nodeAdded = "function() { console.log('nodeAdded')}";
        //myEvent.nodeDeleted = "function() { console.log('nodeDeleted')}";
        //myEvent.rendered = "function(){console.log('Rendered ')}";
        myEvent.renderComplete = "function(){console.log('Render Completed ')}";
        myEvent.beforeRender = "function(){console.log(' beforeRender')}";
        myEvent.dataReady = "function(){console.log('Chart is Ready')}";
        myEvent.dataLoadRequestCompleted = "function(){console.log('JSON data successfully loaded')}";
        //myEvent.dataLoadError = "function(){console.log('unable to fetch json data')}";
        //myEvent.beforedataload = "function(){console.log('before data load')}";
        //myEvent.beforeDataUpdate = "function(){console.log('before data update')}";
        //myEvent.dataLoadRequestCancelled = "function(){console.log('data load request cancelled')}";
        //myEvent.dataUpdated = "function(){console.log('data updated')}";
        //myEvent.dataUpdateCancelled = "function(){'data update cancelled -before data update'}";
        //myEvent.dataLoadRequested = "function(){console.log('data load requested')}";
        myEvent.animationInvoked = "function(){console.log('animationInvoked')}";
        //myEvent.dataLoaded = "function(){console.log('data loaded event triggered')}";
       // myEvent.noDataToDisplay = "function(){console.log('noDataToDisplay')}";
        //myEvent.beforeDispose = "function(){console.log('beforeDispose')}";
        //myEvent.dispose = "function(){console.log('dispose')}";

        myChartConfig.type = "sankey";
        //myChartConfig.width = 1000;
        //myChartConfig.height = 400;
        myChartConfig.dataFormat = "json";
        myChartConfig.id = "Chart_Id";
        myChartConfig.renderAt = "sankeyID";
        myDataSource.chart = myChart;
        myChartConfig.events = myEvent;
        myChartConfig.dataSource = myDataSource;
        String chartConfig = System.Text.Json.JsonSerializer.Serialize(myChartConfig);
        await fusionChartsService.renderChart(chartConfig);
        var FilePath = "data-Sankey.json";  //nodata.json  data-Sankey.json
        var Url = NavigationManager.ToAbsoluteUri(FilePath).ToString();
        //Chart Rendering Through setJSONUrl
        await fusionChartsService.CallFusionChartsFunction("setJSONUrl", "Chart_Id", Url);

        //await fusionChartsService.CallFusionChartsFunction("hasRendered","Chart_Id","status");
        //await fusionChartsService.CallFusionChartsFunction("configure", "Chart_Id","wait"); 

        await fusionChartsService.CallFusionChartsFunction("chartType", "Chart_Id");

        //await fusionChartsService.CallFusionChartsFunction("dispose", "Chart_Id");  



        //getJSONData
        await fusionChartsService.CallFusionChartsFunction("getJSONData", "Chart_Id");
        //getChartAttribute
        await fusionChartsService.CallFusionChartsFunction("getChartAttribute", "Chart_Id");
        //showChartMessage
        // await fusionChartsService.CallFusionChartsFunction("showChartMessage", "Chart_Id", "Hi This is Sankey Diagram", "true", "true");
        //setChartAttribute
        await fusionChartsService.CallFusionChartsFunction("setChartAttribute", "Chart_Id", "caption", "NEW");
        //getXMLData
        // await fusionChartsService.CallFusionChartsFunction("getXMLData", "Chart_Id");
        await fusionChartsService.CallFusionChartsFunction("getChartData", "Chart_Id");


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await renderSankeyDiagram();
        }
        else
        {
        }
    }
}
