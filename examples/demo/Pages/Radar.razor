@page "/simpleradar"
@using Microsoft.JSInterop;
@using System.Text.Json;
@inject IJSRuntime JSInterop;
@inject FusionChartsService fusionChartsService;
@using System.Net.Http;
@inject HttpClient httpClient;
@inject NavigationManager navigationManager;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@using System.Text.Json.Serialization;

<center>
    <h3>
        <b>Radar Chart</b>
    </h3>
</center>
<div id="radarID"></div>

@code {

    public static Radar? _instance;
    public Radar()
    {
        _instance = this;
    }

    public async Task NonStaticMethod()
    {

        string Url = navigationManager.ToAbsoluteUri("data-Radar.json").ToString();
        await fusionChartsService.CallFusionChartsFunction("setJSONUrl", "radId", Url);
        //getJSONData
        await fusionChartsService.CallFusionChartsFunction("getJSONData", "radId", 1);
        //getChartAttribute
        await fusionChartsService.CallFusionChartsFunction("getChartAttribute", "radId");
        //showChartMessage
        await fusionChartsService.CallFusionChartsFunction("showChartMessage", "radId", "Hi This is Radar Map", "true", "true");
        //setChartAttribute
        await fusionChartsService.CallFusionChartsFunction("setChartAttribute", "radId", "caption", "NEW");
        //getXMLData
        //await fusionChartsService.CallFusionChartsFunction("getXMLData", "radId");
        //getChartData
        await fusionChartsService.CallFusionChartsFunction("getChartData", "radId");
        //configureData
        //isUpdateActive-error
        //await fusionChartsService.CallFusionChartsFunction("isUpdateActive", "radId","True");
        //hasRendered
        await fusionChartsService.CallFusionChartsFunction("hasRendered", "radId", "True");
        //print
        //await fusionChartsService.CallFusionChartsFunction("print", "radId", 1);
        //getSVGString
        //await fusionChartsService.CallFusionChartsFunction("getSVGString", "radId", "true");
        //getCSVData
        await fusionChartsService.CallFusionChartsFunction("getCSVData", "radId", 1);
        //render-error
        //await fusionChartsService.CallFusionChartsFunction("render", "radId", 1);
        //dispose
        //await fusionChartsService.CallFusionChartsFunction("dispose", "radId", 1);
        //-----------------------------------------------------------------------------------
    }

    [JSInvokable("ChangeRadarData")]
    public static async Task ChangeRadarData()
    {
				if(_instance != null) {
        	await _instance.NonStaticMethod();
				}
    }
    public async Task renderRadar()
    {
        dynamic myChartConfig = new System.Dynamic.ExpandoObject();
        dynamic myDataSource = new System.Dynamic.ExpandoObject();
        dynamic myChart = new System.Dynamic.ExpandoObject();
        dynamic myEvent = new System.Dynamic.ExpandoObject();

        myChartConfig.type = "radar";
        myChartConfig.renderAt = "radarID";
        myChartConfig.width = 1000;
        myChartConfig.height = 400;
        myChartConfig.id = "radId";
        myChartConfig.dataFormat = "json";

        //------------------------EVENTS-----------------------------------
        myEvent.renderComplete = "function(){console.log('Radar Chart Render Completed ')}";
        myEvent.loaded = "function() { DotNet.invokeMethodAsync('demo','ChangeRadarData')}";
        myEvent.beforeDataUpdate = "function(){console.log(' beforeDataUpdate')}";
        myEvent.chartClick = "function(){console.log(' chartClick')}";
        myEvent.dataLoaded = "function(){console.log(' dataLoaded')}";
        myEvent.beforeDataLoad = "function(){console.log(' beforeDataLoad')}";
        myEvent.chartRollOver = "function(){console.log(' chartRollOver')}";
        myEvent.chartRollOut = "function(){console.log(' chartRollOut')}";
        myEvent.legendItemClicked = "function(){console.log('legendItemClicked')}";
        myEvent.legendItemRollover = "function(){console.log('legendItemRollover')}";
        myEvent.legendItemRollOut = "function(){console.log('legendItemRollOut')}";
        myEvent.drawComplete = "function(){console.log(' drawComplete')}";
        myEvent.dataplotClick = "function(){console.log(' dataplotClick')}";
        myEvent.renderCancelled = "function(){console.log('Render Cancelled ')}";
        myEvent.beforeInitialize = "function(){console.log('beforeInitialize')}";
        myEvent.initialized = "function(){console.log('initialized')}";
        myEvent.renderComplete = "function(){console.log('Render Completed ')}";

        myChartConfig.dataSource = myDataSource;
        myChartConfig.events = myEvent;
        myDataSource.chart = myChart;
        String chartConfig = System.Text.Json.JsonSerializer.Serialize(myChartConfig);
        await fusionChartsService.renderChart(chartConfig);
        
        
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await renderRadar();
        }
        else
        {

        }
    }
}
