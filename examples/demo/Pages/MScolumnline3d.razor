@page "/mscolumnline3d"

@using System.Net.Http;
@inject NavigationManager navigationManager;
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject FusionChartsService fusionChartsService;

<PageTitle>Multi-series Column 3D + Line Single Y-axis  </PageTitle>

<div>
    <div id="mscolumnline3d"></div>
</div>

@code {

    public async Task combinationchart()
    {
        // chart code
        dynamic myChartConfig = new System.Dynamic.ExpandoObject();
        dynamic myDataSource = new System.Dynamic.ExpandoObject();
        dynamic myChart = new System.Dynamic.ExpandoObject();

        dynamic dataset = new System.Dynamic.ExpandoObject();
        dynamic dataset1 = new System.Dynamic.ExpandoObject();
        dynamic dataset2 = new System.Dynamic.ExpandoObject();
        dynamic dataset3 = new System.Dynamic.ExpandoObject();

        dynamic categories = new System.Dynamic.ExpandoObject();

        dynamic myEvent = new System.Dynamic.ExpandoObject();

        //events
        myEvent.loaded = "function() { console.log('loaded')}";
        myEvent.renderComplete = "function() { console.log('renderComplete')}";
        myEvent.initialized = "function() { console.log('initialized')}";
        myEvent.beforeRender = "function() { console.log('beforeRender')}";
        myEvent.rendered = "function() { console.log('rendered')}";

        myEvent.dataPlotClick = "function() { console.log('dataPlotClick')}";
        myEvent.dataplotRollOver = "function() { console.log('dataplotRollOver')}";
        myEvent.dataplotRollOut = "function() { console.log('dataplotRollOut')}";
        myEvent.dataLabelClick = "function() { console.log('dataLabelClick')}";
        myEvent.dataLabelRollOver = "function() { console.log('dataLabelRollOver')}";
        myEvent.dataLabelRollOut = "function() { console.log('dataLabelRollOut')}";

        myEvent.legendItemClicked = "function() { console.log('legendItemClicked')}";
        myEvent.legendItemRollOver = "function() { console.log('legendItemRollOver')}";
        myEvent.legendItemRollOut = "function() { console.log('legendItemRollOut')}";

        myEvent.chartClick = "function() { console.log('chartClick')}";
        myEvent.chartRollOver = "function() { console.log('chartRollOver')}";
        myEvent.chartRollOut = "function() { console.log('chartRollOut')}";

        myChartConfig.type = "mscolumnline3d";
        myChartConfig.width = 1000;
        myChartConfig.height = 600;
        myChartConfig.dataFormat = "json";
        myChartConfig.renderAt = "mscolumnline3d";

        myChart.showvalues = "0";
        myChart.caption = "Cost Analysis";
        myChart.numberprefix = "$";
        myChart.xaxisname = "Quarters";
        myChart.yaxisname = "Cost";
        myChart.theme = "fusion";

        categories.category = new[]
        {
            new { label = "Quarter 1" },
            new { label = "Quarter 2" },
            new { label = "Quarter 3" },
            new { label = "Quarter 4" },

    };
        dataset1.seriesname = "Fixed Cost";
        dataset1.data = new[]
        {
            new { value = "235000"},
            new { value = "225100"},
            new { value = "222000"},
            new { value = "230500"},
       };
        dataset2.seriesname = "Variable Cost";
        dataset2.data = new[]
        {
            new { value = "230000"},
            new { value = "143000"},
            new { value = "198000"},
            new { value = "327600"},
       };
        dataset3.seriesname = "Budgeted cost";
        dataset3.renderAs = "line";
        dataset3.data = new[]
        {
            new { value = "455000"},
            new { value = "334000"},
            new { value = "426000"},
            new { value = "403000"},
       };

        myDataSource.chart = myChart;
        myDataSource.categories = new[] { categories };
        myDataSource.dataset = new[] { dataset1, dataset2, dataset3 };

        myChartConfig.events = myEvent;
        myChartConfig.dataSource = myDataSource;
        String chartConfig = System.Text.Json.JsonSerializer.Serialize(myChartConfig);
        await fusionChartsService.renderChart(chartConfig);

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await combinationchart();
        }
        else
        {

        }
    }

}